{"version":3,"sources":["../../src/pages/chat-list/chat-list.module.ts","../../src/pages/chat-list/chat-list.ts"],"names":[],"mappings":"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","file":"23.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ChatListPage } from './chat-list';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ChatListPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(ChatListPage),\r\n  ],\r\n})\r\nexport class ChatListPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/chat-list/chat-list.module.ts","import { Component } from '@angular/core';\r\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\r\nimport * as firebase from 'firebase';\r\nimport { ChatProvider } from '../../providers/chat/chat';\r\nimport 'firebase/firestore';\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-chat-list',\r\n  templateUrl: 'chat-list.html',\r\n})\r\nexport class ChatListPage {\r\n  db: any = firebase.firestore();\r\n  userId: any;\r\n  userEmailName: string;\r\n  chatLists: any;\r\n  pageLoaded: boolean = false;\r\n\r\n  constructor(\r\n    public navCtrl: NavController, \r\n    public navParams: NavParams,\r\n    public chatProvider: ChatProvider\r\n  ) {\r\n    this.userId = localStorage.getItem('userId');\r\n    this.userEmailName = localStorage.getItem('email').split('@')[0].replace('.', '').toLowerCase();\r\n  }\r\n\r\n  ionViewDidLoad() {\r\n    this.loadChatList();\r\n  }\r\n\r\n  openChatSingle(chatId) {\r\n    let chatUserArr = chatId.split('-');\r\n    let name = chatUserArr[0] == this.userEmailName ? chatUserArr[1] : chatUserArr[0];\r\n\r\n    this.db.collection('users').get().then(res => {\r\n      let data = res.docs.map(doc => doc.data());\r\n      let user = data.filter(user => user.email.split('@')[0].replace('.', '').toLowerCase() == name.toLowerCase());\r\n      let payload = {uid: user[0].uid};\r\n      this.navCtrl.push('ChatSinglePage', payload);\r\n    }).catch(err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  loadChatList() {\r\n      this.db.collection(\"chats\").onSnapshot(querySnapshot => {\r\n        let myArr = [];\r\n        let promises = [];\r\n        let contactsArr = [];\r\n        querySnapshot.forEach((doc) => {\r\n          if(doc.id.indexOf(this.userEmailName) != -1) {\r\n            contactsArr.push(doc.id);\r\n          }\r\n        });\r\n\r\n        if(contactsArr.length) {\r\n          for(let x = 0; x < contactsArr.length; x++) {\r\n            let contactArr = contactsArr[x].toLowerCase();\r\n            console.log('contactsArr', contactArr);\r\n            const promise = new Promise((resolve, reject) => {\r\n              this.db.collection(\"chats\").doc(contactArr).collection('messages').orderBy(\"dateAdded\", \"desc\").limit(1).onSnapshot(res => {\r\n                let data = res.docs.map(data => data.data());\r\n                if(res.docs.length) {\r\n                  data[0]['chatId'] = contactArr;\r\n                  let userArr = contactArr.split('-');\r\n                  let userEmailName = userArr[0] == this.userEmailName ? userArr[1] : userArr[0];\r\n\r\n                  this.db.collection(\"chats\").doc(contactArr).collection('messages').get().then(chatRes => {\r\n                    let chatUnreadCount = chatRes.docs.map(chatData => chatData.data()).filter(chatRead => chatRead.isRead == 0 && chatRead.userEmailName != this.userEmailName).length;\r\n                    this.db.collection('users').get().then(res => {\r\n                      let userData = res.docs.map(doc => doc.data());\r\n                      let user = userData.filter(user => user.email.split('@')[0].replace('.', '').toLowerCase() == userEmailName.toLowerCase());\r\n                      data[0]['userPhoto'] = user[0].photo;\r\n                      data[0]['otherName'] = user[0].name;\r\n                      data[0]['unreadCount'] = chatUnreadCount;\r\n                      console.log('chatUnreadCount', chatUnreadCount);\r\n                      myArr.map((arr, index) => {\r\n                        if(arr.chatId == contactArr) {\r\n                          myArr.splice(index, 1);\r\n                        }\r\n                      });\r\n\r\n                      myArr.push(data[0]);\r\n                      console.log('myArr', myArr);\r\n                      resolve(1);\r\n                    });\r\n                  });\r\n\r\n                }else {\r\n                  this.chatLists = [];\r\n                  this.pageLoaded = true;\r\n                }\r\n              });\r\n            });\r\n\r\n            promises.push(promise);\r\n          }  \r\n        }else {\r\n          this.chatLists = [];\r\n          this.pageLoaded = true;\r\n        }\r\n\r\n        Promise.all(promises).then(() => {\r\n          this.chatLists = [];\r\n          this.chatLists = myArr;\r\n\r\n          function compare(a,b) {\r\n            if (a.timestampInSecs < b.timestampInSecs)\r\n              return -1;\r\n            if (a.timestampInSecs > b.timestampInSecs)\r\n              return 1;\r\n            return 0;\r\n          }\r\n          \r\n          this.chatLists.reverse(compare);\r\n          \r\n          console.log('this.chatLists', this.chatLists);\r\n          this.pageLoaded = true;\r\n\r\n        });\r\n      });\r\n  }\r\n\r\n  onSearch(ev: any) {\r\n    this.pageLoaded = false;\r\n    let val = ev.target.value;\r\n\r\n    // this.db.collection(\"chats\").onSnapshot(querySnapshot => {\r\n    //   let myArr = [];\r\n    //   let promises = [];\r\n    //   let contactsArr = [];\r\n    //   querySnapshot.forEach((doc) => {\r\n    //     if(doc.id.indexOf(this.userEmailName) != -1) {\r\n    //       contactsArr.push(doc.id);\r\n    //     }\r\n    //   });\r\n     \r\n    //   if(contactsArr.length) {\r\n    //     for(let x = 0; x < contactsArr.length; x++) {\r\n    //       console.log('contactsArr', contactsArr[x]);\r\n    //       const promise = new Promise((resolve, reject) => {\r\n    //         this.db.collection(\"chats\").doc(contactsArr[x]).collection('messages').orderBy(\"dateAdded\", \"desc\").limit(1).onSnapshot(res => {\r\n    //           let data = res.docs.map(data => data.data());\r\n    //           if(res.docs.length) {\r\n    //             data[0]['chatId'] = contactsArr[x];\r\n    //             let userArr = contactsArr[x].split('-');\r\n    //             let userEmailName = userArr[0] == this.userEmailName ? userArr[1] : userArr[0];\r\n\r\n    //             this.db.collection(\"chats\").doc(contactsArr[x]).collection('messages').get().then(chatRes => {\r\n    //               let chatUnreadCount = chatRes.docs.map(chatData => chatData.data()).filter(chatRead => chatRead.isRead == 0 && chatRead.userEmailName != this.userEmailName).length;\r\n    //               this.db.collection('users').get().then(res => {\r\n    //                 let userData = res.docs.map(doc => doc.data());\r\n    //                 let user = userData.filter(user => user.email.split('@')[0].replace('.', '').toLowerCase() == userEmailName.toLowerCase());\r\n    //                 data[0]['userPhoto'] = user[0].photo;\r\n    //                 data[0]['otherName'] = user[0].name;\r\n    //                 data[0]['unreadCount'] = chatUnreadCount;\r\n            \r\n    //                 myArr.map((arr, index) => {\r\n    //                   if(arr.chatId == contactsArr[x]) {\r\n    //                     myArr.splice(index, 1);\r\n    //                   }\r\n    //                 });\r\n\r\n    //                 myArr.push(data[0]);\r\n    //                 console.log('myArr', myArr);\r\n    //                 resolve(1);\r\n    //               });\r\n    //             });\r\n\r\n    //           }else {\r\n    //             this.chatLists = [];\r\n    //             this.pageLoaded = true;\r\n    //           }\r\n    //         });\r\n    //       });\r\n\r\n    //       promises.push(promise);\r\n    //     }  \r\n    //   }else {\r\n    //     this.chatLists = [];\r\n    //     this.pageLoaded = true;\r\n    //   }\r\n\r\n    //   Promise.all(promises).then(() => {\r\n    //     this.chatLists = [];\r\n    //     this.chatLists = myArr;\r\n        \r\n    //     if (val && val.trim() != '') {\r\n    //       this.chatLists =  this.chatLists.filter((el) => {\r\n    //         return (el.name.toLowerCase().indexOf(val.toLowerCase()) > -1 ||\r\n    //                 el.otherName.toLowerCase().indexOf(val.toLowerCase()) > - 1);\r\n    //       });\r\n    //     }\r\n  \r\n    //     setTimeout(() => {\r\n    //       this.pageLoaded = true;\r\n    //     }, 700);\r\n    //   });\r\n    // });\r\n    this.db.collection(\"chats\").onSnapshot(querySnapshot => {\r\n      let myArr = [];\r\n      let promises = [];\r\n      let contactsArr = [];\r\n      querySnapshot.forEach((doc) => {\r\n        if (doc.id.indexOf(this.userEmailName) != -1) {\r\n          contactsArr.push(doc.id);\r\n        }\r\n      });\r\n\r\n      if (contactsArr.length) {\r\n        for (let x = 0; x < contactsArr.length; x++) {\r\n          let contactArr = contactsArr[x].toLowerCase();\r\n          console.log('contactsArr', contactArr);\r\n          const promise = new Promise((resolve, reject) => {\r\n            this.db.collection(\"chats\").doc(contactArr).collection('messages').orderBy(\"dateAdded\", \"desc\").limit(1).onSnapshot(res => {\r\n              let data = res.docs.map(data => data.data());\r\n              if (res.docs.length) {\r\n                data[0]['chatId'] = contactArr;\r\n                let userArr = contactArr.split('-');\r\n                let userEmailName = userArr[0] == this.userEmailName ? userArr[1] : userArr[0];\r\n\r\n                this.db.collection(\"chats\").doc(contactArr).collection('messages').get().then(chatRes => {\r\n                  let chatUnreadCount = chatRes.docs.map(chatData => chatData.data()).filter(chatRead => chatRead.isRead == 0 && chatRead.userEmailName != this.userEmailName).length;\r\n                  this.db.collection('users').get().then(res => {\r\n                    let userData = res.docs.map(doc => doc.data());\r\n                    let user = userData.filter(user => user.email.split('@')[0].replace('.', '').toLowerCase() == userEmailName.toLowerCase());\r\n                    data[0]['userPhoto'] = user[0].photo;\r\n                    data[0]['otherName'] = user[0].name;\r\n                    data[0]['unreadCount'] = chatUnreadCount;\r\n                    console.log('chatUnreadCount', chatUnreadCount);\r\n                    myArr.map((arr, index) => {\r\n                      if (arr.chatId == contactArr) {\r\n                        myArr.splice(index, 1);\r\n                      }\r\n                    });\r\n\r\n                    myArr.push(data[0]);\r\n                    console.log('myArr', myArr);\r\n                    resolve(1);\r\n                  });\r\n                });\r\n\r\n              } else {\r\n                this.chatLists = [];\r\n                this.pageLoaded = true;\r\n              }\r\n            });\r\n          });\r\n\r\n          promises.push(promise);\r\n        }\r\n      } else {\r\n        this.chatLists = [];\r\n        this.pageLoaded = true;\r\n      }\r\n\r\n      Promise.all(promises).then(() => {\r\n        this.chatLists = [];\r\n        this.chatLists = myArr;\r\n\r\n        function compare(a, b) {\r\n          if (a.timestampInSecs < b.timestampInSecs)\r\n            return -1;\r\n          if (a.timestampInSecs > b.timestampInSecs)\r\n            return 1;\r\n          return 0;\r\n        }\r\n\r\n        this.chatLists.reverse(compare);\r\n\r\n        if (val && val.trim() != '') {\r\n          this.chatLists =  this.chatLists.filter((el) => {\r\n            return (el.name.toLowerCase().indexOf(val.toLowerCase()) > -1 ||\r\n                    el.otherName.toLowerCase().indexOf(val.toLowerCase()) > - 1);\r\n          });\r\n        }\r\n\r\n        setTimeout(() => {\r\n          this.pageLoaded = true;\r\n        }, 700);\r\n      });\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/chat-list/chat-list.ts"],"sourceRoot":""}